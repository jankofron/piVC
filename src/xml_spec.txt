Note:
	Remember to escape various things when sending from server to client
	http://hdf.ncsa.uiuc.edu/HDF5/XML/xml_escape_chars.htm (both ways?)

Program send:

Client -> Server
<piVC_transmission type="program_submission_request" >
	<code> code </code>
	<options>  // required even if empty
		<generate_runtime_assertions />  // optional: we generate them if this is there
	<options>
</piVC_transmission>


Server -> Client
<piVC_transmission type="program_submission_response" >
        <messages>//optional
                <message>This is the worst attempt at verification I've ever seen. You should drop this class.</message>
                <message>There can be more than one custom message.</message>
        </messages>
        //result node goes here
</piVC_transmission>


Result node: server exceptions:
	<result status="compiler_error">
		<error type="compiler_error">
			Error!
		</error>
	</result>


Result node: server errors with user program:
	<result status="error">
		<error type="semantic_error/syntax_error">
			<location>
				<start row=foo col=bar />
				<end row=bar col=foo />
			</location>
			<message>
				Error!
			</message>
		</error>
		// more errors as siblings
	</result>
</piVC_transmission>

Result node: server no errors:
	<result status="proved/unproved">
		<function name="name">
			<correctness status="valid/invalid/unknown">
  			        <verification_atom status="valid/invalid/unknown">
				        <basic_path name="basic path name">
					        <step type="expr/assume/annotation">
						        <location>
							        <start row=foo col=bar byte=bar />
							        <end row=bar col=foo byte=bar />
						        </location>
						        <text>
							        cool++;
						        </text>
					        </step>
					        // more steps as siblings
				        </basic_path>
				        <vc>
					        <implies>
                                                        <conjunct in_inductive_core="true">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </conjunct>
                                                        <conjunct in_inductive_core="true">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </conjunct>
                                                </implies>
					        <implies>
                                                        <conjunct in_inductive_core="true" status="unknown">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </conjunct>
                                                        <conjunct in_inductive_core="true" status="valid">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </conjunct>
                                                </implies>

				        </vc>
				        <counterexample>  // optional tag (only there if invalid)
					        <var text="var1 = val1">
					             <location> ... </location>
					        </var>
					        <var text="var2 = val2">
					             <location> ... </location>
					        </var>
					        // ...
				        </counterexample>
			        </verification_atom>
			        // more verification_atoms as siblings
			</correctness>
			<termination status="valid/invalid/unknown">
				<decreasing status="valid/invalid/unknown">
			                // verification_atoms here are the same as the <verification_atom> tags above.
				</decreasing>
				<nonnegative status="valid/invalid/unknown">
			                // verification atoms here are the same as the <verification_atom> tags above, but without basic paths
				</nonnegative>
				TODO: Add something here about extra places required.
			</termination>
		</function>
		// more functions as siblings
	</result>
