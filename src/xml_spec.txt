Note:
	Remember to escape various things when sending from server to client
	http://hdf.ncsa.uiuc.edu/HDF5/XML/xml_escape_chars.htm (both ways?)

Program send:

Client:
<piVC_transmission type="program_submission_request" >
	<code> code </code>
	<options>  // required even if empty
		<generate_runtime_assertions />  // optional: we generate them if this is there
	<options>
</piVC_transmission>


Server exceptions:
<piVC_transmission type="program_submission_response" >
	<result status="compiler_error">
		<error type="compiler_error">
			Error!
		</error>
	</result>
</piVC_transmission>

Server errors with user program:
<piVC_transmission type="program_submission_response" >
	<result status="error">
		<error type="semantic_error/syntax_error">
			<location>
				<start row=foo col=bar />
				<end row=bar col=foo />
			</location>
			<message>
				Error!
			</message>
		</error>
		// more errors as siblings
	</result>
</piVC_transmission>

Server no errors:
<piVC_transmission type="program_submission_response" >
	<result status="proved/unproved">
		<function name="name">
			<correctness status="valid/invalid/unknown">
  			        <basic_path status="valid/invalid/unknown">
				        <step>
					        <node type="expr/assume/annotation">
						        <location>
							        <start row=foo col=bar byte=bar />
							        <end row=bar col=foo byte=bar />
						        </location>
						        <text>
							        cool++;
						        </text>
					        </node>
					        // more nodes as siblings
				        </step>
				        // more steps as siblings
				        <vc>
					        <implies>
                                                        <conjunct in_inductive_core="true">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </conjunct>
                                                        <conjunct in_inductive_core="true">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </conjunct>
                                                </implies>
					        <implies>
                                                        <rhs_conjunct valid="true" in_inductive_core="true">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </rhs_conjunct>
                                                        <rhs_conjunct valid="true" in_inductive_core="true">
                                                                  <text> ... </text>
                                                                  <location> ... </location>
                                                        </rhs_conjunct>
                                                </implies>
				        </vc>
				        <counterexample>  // optional tag (only there if invalid)
					        <var text="var1 = val1">
					             <location> ... </location>
					        </var>
					        <var text="var2 = val2">
					             <location> ... </location>
					        </var>
					        // ...
				        </counterexample>
			        </basic_path>
			        // more basic paths as siblings
			</correctness>
			<termination status="valid/invalid/unknown">
				<decreasing status="valid/invalid/unknown">
			                // basic paths here are the same as the <basic_path> tags above.
				</decreasing>
				<nonnegative status="valid/invalid/unknown">
				        <nonnegative_vc status="valid/invalid/unknown">
					        <vc> vc </vc>
						<counterexample> ... </counterexample> // optional
					</nonnegative_vc>
				</nonnegative>
				TODO: Add something here about extra places required.
			</termination>
		</function>
		// more functions as siblings
	</result>
</piVC_transmission>
