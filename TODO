
----------------
Short-term TODOs
----------------

Jason
	Generate basic path names somehow.
	Arrays DP: check remaining TODOs, don't run arrays DP on VCs not in the fragment, fix index set construction
	Bug: Loop assertions require parens now.
	Bug: Fix syntax errors that are permitted due to temp_expr stuff but are not caught
	Bug: Lots of consecutive array updates kills vc generation, but old PiVC handles them just fine (see samples/array_updates.pi).
        Change lexer/parser to account for different types of line endings in a clean way - also change xml reading code to use this
	Bug: Fix _v0 highlighting.

Joel
	Maybe typedef stuff like path (in bp, vc, etc) to make types more readable.
		VC: expr * validity * Counterexamples.example list option.  See verify.mli
	Maybe turn servers (main, dp) into modules so we can give them "methods" (e.g. print accepted message differently (name, extra space)).
	GUI tree usability improvements.
	Timeouts.
	Command-line arg support for server for stuff like: --print-cache-info or --print-yices-output.
		Maybe -print yices;vc format
		--truncate-lines
		Maybe implement by making server framework use modules so we have locals.
        Bin directory structure for bin files
		piVC/ has src/, bin/, conf/, include/, samples/
	Add exception/assert thing.

Both
	Figure out how to display VCs in the GUI.
		One idea: pretty-print the VC (using http://caml.inria.fr/resources/doc/guides/format.html perhaps?) and put in the GUI tree on multiple lines (e.g. by conjuncts).

Unassigned
	Make the ast to_string functions more paren aware.  So they only put parens if they're needed (e.g. if a child is a compound type).
		Note that if we pretty-print VCs to display in the GUI, that can incorporate this.
	Deal with floats/doubles.  Also, Div and IDiv right now are equivalent.
	Add support for warnings?  Asserts in Pi? (Note from Jason: we already support Pi asserts, but maybe you mean something else.)

-----------------------------
Proposed High-level timetable
-----------------------------

Week 4
	Jason: Config files (ports to bind to, IP/ports to connect to, saved files dir, max connections, num cached vcs)
	Both: Equivalent in functionality to Aaron's version, with no remaining bugs

Week 5
	Jason: Run "Aaron's algorithm" of static analysis (see Aaron's email 1/27/08)
	Joel: Proof of termination (see Aaron's original PiVC email)
		Remaining: prove that you have termination args everywhere you need them, check that all ranking annotations are of the same size (in semantic checking or in vc generation?)

Week 6
	Jason: defines, structs and typedefs (see Aaron's first email 1/23/08)

Week 7
	Joel: Static analysis API
	At least one of hashtables, sets, multisets (see Aaron's email 12/6/07)

Week 8
	Both: Fully-working version, only polishing is necessary
	Jason: Email stuff.

Week 9
	Convert to C++ and run.
	Finished, ready-to-go

Week 10
	Party time!

--------------------
Possible later TODOs
--------------------

Auto-indent in GUI (especially for assertions).
Better syntax highlighting?
