Either
Figure out way to cleanly stop server. Currently, it remains bound to ports for awhile after ctrl-C is executed, which makes restarting after a recompile time-consuming.

Jason
	change all refs from node to step
Joel
	DP stuff (see Aaron's second email 1/23/08): new context, declare (renamed) variables, push assertion, getsat, delete context

Figure out how to deal with predicates (sorted, partitioned, etc.).
Break stmt
	Add a struct or pass around recursively?
	Maybe also make location an option?
Semantically check assertions

defines
Caching VCs
Structs and typedefs (see Aaron's first email 1/23/08)
Have the gui send its code to the server in xml and have the server parse that xml.

Long Term
- "definitions" file (see Aaron's email 12/6/07)
- Hashtables, sets, multisets (see Aaron's email 12/6/07)
- User-defined predicates.
- Run "Aaron's algorithm" of static analysis (see Aaron's email 1/27/08)
- Visualize counterexamples (see two of Aaron's emails 1/27/2008)
- Termination arguments (see Aaron's original PiVC email)

Less important
- Typedef stuff like path (in bp, vc, etc) to make types more readable

Maybe, maybe not
- Put comments in the ast so we can print them out in to-C++ printing.
- ocamlmake

Notes
-----
See http://www.ocaml-programming.de/packages/documentation/findlib/guide-html/quickstart.html for info on findlib


-----------------------------
Proposed High-level timetable
-----------------------------

(Note that this does not reflect when we will be working on the stuff, but rather when we will be finished working on the stuff. e.g. Although I have put "proof of termination" down for week 7, it'll obviously take much longer than 1 week to do it.)

Unless otherwise specified, deadlines are at the end of the week

Week 1
Some stuff working for array DP

Week 2
Everything working for array DP

Week 3
Equivilent in functionality to Aaron's version, with no remaining bugs

Week 4
Couter-example generation

Week 5
VC caching

Week 6
Support for one other DP (perhaps sets)

Week 7
Proof of termination

Week 8
Fully-working version, only polishing is necessary

Week 9
Finished, ready-to-go

Week 10
