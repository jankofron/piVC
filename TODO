----------------
Short-term TODOs
----------------

Jason
	don't restrict array reads to identifiers
	change all refs from node to step	
	fix unknown yices return value
	Generate basic path names somehow.
	Loop assertions require parens now.
        Don't run arrays DP on VCs not in the fragment
        Remaining TODOs in arrays DP code
        Fix arrays DP code to make it run much faster
        Fix syntax errors that are permitted due to temp_expr stuff but are not caught
Joel
	Typedef stuff like path (in bp, vc, etc) to make types more readable
	Turn servers (main, dp) into modules so we can give them "methods" (e.g. print accepted message differently (name, extra space))?
        Bug: after make clean, ocamllex doesn't run in a make (although ocamlyacc seems to run)
        Quasi-bug: no way to turn of caching completely. If num_cached_vcs is set to 0, it caches everything.
        Grey out compile button/menu option while compilation is occuring. Put loading bar somewhere. (Just one of those bounce left/right ones, I'm assuming.)
                Jason suggests that below the file editing pane, we have a status area. Normally, it'll say "Status: editing file.pi", and during compilation, it'll say "Status: compiling file.pi", and have a loading bar.
        Don't reset GUI tree every recompile.
Both
	Figure out whether counterexamples need to deal with arrays (test by verifying real programs).
        Config files (ports to bind to, IP/ports to connect to, saved files dir, max connections, num cached vcs)
	Figure out how to display VCs in the GUI.
		One idea: pretty-print the VC (using http://caml.inria.fr/resources/doc/guides/format.html perhaps?) and put in the GUI tree on multiple lines (e.g. by conjuncts).
Unassigned
	Make the ast to_string functions more paren aware.  So they only put parens if they're needed (e.g. if a child is a compound type).
		Note that if we pretty-print VCs to display in the GUI, that can incorporate this.
	Make the main_server -> dp_server requests asynchronous.

-----------------------------
Proposed High-level timetable
-----------------------------

Week 1-2
	Joel: Counter-example generation (see two of Aaron's emails 1/27/2008)(fix bugs, deal with arrays (maybe, see above))

Week 3
	Jason: Figure out how to deal with predicates (sorted, partitioned, etc.)(and user-defined definitions file).
	Have the gui send its code to the server in xml and have the server parse that xml.
	Both: Equivalent in functionality to Aaron's version, with no remaining bugs

Week 4
	Joel: VC caching (test)
	Joel: semantically check break stmts, only allow assigns as expr roots (Aaron does this).
	Jason: semantically check assertions
	Jason: Run-time assertions

Week 5
	Jason: defines, structs and typedefs (see Aaron's first email 1/23/08)
	Joel: Proof of termination (see Aaron's original PiVC email)

Week 6
	At least one of hashtables, sets, multisets (see Aaron's email 12/6/07)


Week 7
	Joel: Static analysis API
	Jason: Run "Aaron's algorithm" of static analysis (see Aaron's email 1/27/08)

Week 8
	Both: Fully-working version, only polishing is necessary

Week 9
	Convert to C++ and run.
	Finished, ready-to-go

Week 10
	Party time!

--------------------
Possible later TODOs
--------------------

Syntax highlighting in GUI.
Auto-indent in GUI (especially for assertions).
