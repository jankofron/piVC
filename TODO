
----------------
Short-term TODOs
----------------

Jason
	don't restrict array reads to identifiers
	change all refs from node to step	
	fix unknown yices return value
	Generate basic path names somehow.
	Bug: Loop assertions require parens now.
	Don't run arrays DP on VCs not in the fragment
	Remaining TODOs in arrays DP code
	Bug: Fix syntax errors that are permitted due to temp_expr stuff but are not caught
	Bug: func call in while/for conditions doesn't work
	Bug: fix index set construction for arrays DP
	Bug: Lots of consecutive array updates kills yices, but old PiVC handles them just fine (see samples/array_updates.pi).
        Bug: replace sub_idents... function with unique identifier as opposed to name
	Bug: Errors in a call's formals (e.g. invalid identifier as an argument) are reported twice.  I think it's because you call check_formals twice in the second half of call when we've already checked the formals in the middle, but I don't know that second-half code.
        Change lexer/parser to account for different types of line endings in a clean way - also change xml reading code to use this

Joel
	Maybe typedef stuff like path (in bp, vc, etc) to make types more readable.
	Maybe turn servers (main, dp) into modules so we can give them "methods" (e.g. print accepted message differently (name, extra space)).
	GUI tree usability improvements.
	Timeouts.

Both
	Figure out how to display VCs in the GUI.
		One idea: pretty-print the VC (using http://caml.inria.fr/resources/doc/guides/format.html perhaps?) and put in the GUI tree on multiple lines (e.g. by conjuncts).

Unassigned
	Disallow updates to parameters.
	Make the ast to_string functions more paren aware.  So they only put parens if they're needed (e.g. if a child is a compound type).
		Note that if we pretty-print VCs to display in the GUI, that can incorporate this.

-----------------------------
Proposed High-level timetable
-----------------------------

Week 4
	Jason: semantically check assertions
	Jason: Config files (ports to bind to, IP/ports to connect to, saved files dir, max connections, num cached vcs)
	Joel: Run-time assertions
	Both: Equivalent in functionality to Aaron's version, with no remaining bugs

Week 5
	Jason: Run "Aaron's algorithm" of static analysis (see Aaron's email 1/27/08)
	Joel: Proof of termination (see Aaron's original PiVC email)

Week 6
	Jason: defines, structs and typedefs (see Aaron's first email 1/23/08)

Week 7
	Joel: Static analysis API
	At least one of hashtables, sets, multisets (see Aaron's email 12/6/07)

Week 8
	Both: Fully-working version, only polishing is necessary
	Jason: Email stuff.

Week 9
	Convert to C++ and run.
	Finished, ready-to-go

Week 10
	Party time!

--------------------
Possible later TODOs
--------------------

Auto-indent in GUI (especially for assertions).
