----------------
Short-term TODOs
----------------

Jason
	don't restrict array reads to identifiers
	change all refs from node to step
	config files (ports to bind to, IP/ports to connect to, saved files dir, max connections, num cached vcs)
	fix unknown yices return value
	Generate basic path names somehow.
	Loop assertions require parens now.
Joel
	Typedef stuff like path (in bp, vc, etc) to make types more readable
	Turn servers (main, dp) into modules so we can give them "methods" (e.g. print accepted message differently (name, extra space))?
Both
	Figure out whether counterexamples need to deal with arrays (test by verifying real programs).

-----------------------------
Proposed High-level timetable
-----------------------------

Week 1-2
	Joel: Counter-example generation (see two of Aaron's emails 1/27/2008)(fix bugs, deal with arrays (maybe, see above), add locations to identifiers for shadowed stuff)

Week 3
	Jason: Figure out how to deal with predicates (sorted, partitioned, etc.)(and user-defined definitions file).
	Have the gui send its code to the server in xml and have the server parse that xml.
	Both: Equivalent in functionality to Aaron's version, with no remaining bugs

Week 4
	Joel: VC caching (test)
	Joel: semantically check break stmts, only allow assigns as expr roots (Aaron does this).
	Jason: semantically check assertions
	Jason: Run-time assertions

Week 5
	Jason: defines, structs and typedefs (see Aaron's first email 1/23/08)
	Joel: Proof of termination (see Aaron's original PiVC email)

Week 6
	At least one of hashtables, sets, multisets (see Aaron's email 12/6/07)


Week 7
	Joel: Static analysis API
	Jason: Run "Aaron's algorithm" of static analysis (see Aaron's email 1/27/08)

Week 8
	Both: Fully-working version, only polishing is necessary

Week 9
	Convert to C++ and run.
	Finished, ready-to-go

Week 10
	Party time!

--------------------
Possible later TODOs
--------------------

Syntax highlighting in GUI.
Auto-indent in GUI (especially for assertions).
